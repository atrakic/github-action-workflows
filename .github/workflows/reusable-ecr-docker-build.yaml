# Reusable workflow
name: Build and deploy to AWS ECR

on:
  workflow_call:
    inputs:
      ecr-enable:
        description: "Build and push to ECR"
        required: false
        default: false
        type: boolean
      context:
        description: "Docker context (path) to start build from"
        required: false
        type: string
        default: .
      aws_region:
        description: "What AWS region to use"
        required: false
        type: string
        default: eu-west-1
      container_repository:
        description: "The name of container repository"
        required: false
        type: string
        default: |
          ${{ github.repository }}
      image_tag:
        description: "Tags for the container"
        required: false
        type: string
        default: |
          ${{ github.sha }}

    secrets:
      aws-access-key-id:
        description: Docker Hub username
        required: true
      aws-secret-access-key:
        description: Docker Hub token
        required: true

    outputs:
      image:
        description: "Get full path of the image"
        value: ${{ jobs.build-image.outputs.image }}

permissions:
  contents: read

jobs:
  build-and-push:
    name: AWS ECR Build and push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        if: inputs.ecr-enable
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws_region }}

      - name: Login to Amazon ECR
        if: inputs.ecr-enable
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        if: inputs.ecr-enable
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ inputs.container_repository }}
          IMAGE_TAG: ${{ inputs.image_tag }}
        run: |
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG ${{ inputs.context }}
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo '::echo::on'
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
